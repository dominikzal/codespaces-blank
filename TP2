#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <time.h>
#include <queue>
#include <stack>
#include <iomanip>
#include <future>
#include <chrono>
using namespace std;

class Karty
{
public:
    int waga;
    string kolor;
};

struct Stol
{
    stack<Karty> stos_gracza1;
    stack<Karty> stos_gracza2;
};

void GenerujTalie(Karty karta[], vector<Karty>& talia);
void WypiszTalie(vector<Karty> talia);
void RozdajKarty(vector<Karty>& talia, queue<Karty>& gracz1, queue<Karty>& gracz2);
void WypiszKolejke(queue<Karty> gracz1, queue<Karty> gracz2);
void Gra(queue<Karty>& gracz1, queue<Karty>& gracz2, Stol& stolik, bool& koniec);
void Wyswietl(queue<Karty> gracz1, queue<Karty> gracz2, Stol stolik);
void LosujTalie(Karty karta[], vector<Karty>& talia);

int main()
{
    Karty karta[52];
    vector<Karty> talia;
    queue<Karty> gracz1;
    queue<Karty> gracz2;
    Stol stolik;
    bool koniec = false;


    GenerujTalie(karta, talia);

    std::promise<std::vector<Karty>> promiseTalia;
    std::future<std::vector<Karty>> futureTalia = promiseTalia.get_future();
    std::thread watek([&karta, &promiseTalia]() {
        std::vector<Karty> talia;
        LosujTalie(karta, talia);
        promiseTalia.set_value(talia);
        });
    if (futureTalia.wait_for(std::chrono::seconds(1)) == std::future_status::ready) {
        talia = futureTalia.get();
        std::cout << "Talia zostala wylosowana w innym watku." << std::endl;
    }
    else {
        std::cout << "Timeout - nie udalo sie wylosowac talii w czasie 1 sekundy." << std::endl;
    }

    watek.join(); // zakończenie wątku
    RozdajKarty(talia, gracz1, gracz2);
    //WypiszKolejke(gracz1, gracz2);
    //WypiszTalie(talia);
    Gra(gracz1, gracz2, stolik, koniec);
    if (gracz2.empty() == true)
        cout << "Wygrywa gracz 1!" << endl;
    else if (gracz1.empty() == true)
        cout << "Wygrywa gracz 2!" << endl;


    return 0;
}

void LosujTalie(Karty karta[], vector<Karty>& talia) {
    srand(time(NULL));
    int liczba;
    int zasieg = 52;
    for (int i = 0; i < 52; i++)
    {
        liczba = rand() % zasieg;
        talia.push_back(karta[liczba]);
        for (int j = liczba; j < 51; j++)
        {

            karta[j] = karta[j + 1];

        }
        zasieg--;
    }
};

void GenerujTalie(Karty karta[], vector<Karty>& talia)
{
    for (int i = 0; i < 52; i = i + 4)
    {

        karta[i].waga = i / 4 + 2;
        karta[i + 1].waga = i / 4 + 2;
        karta[i + 2].waga = i / 4 + 2;
        karta[i + 3].waga = i / 4 + 2;
        karta[i].kolor = "serce";
        karta[i + 1].kolor = "karo";
        karta[i + 2].kolor = "trefl";
        karta[i + 3].kolor = "pik";

    }
}

void RozdajKarty(vector<Karty>& talia, queue<Karty>& gracz1, queue<Karty>& gracz2)
{
    for (int i = 51; i >= 0; i--)
    {
        if (i % 2 == 0)
            gracz1.push(talia[i]);
        else
            gracz2.push(talia[i]);
        talia.pop_back();
    }

}

void WypiszTalie(vector<Karty> talia)
{
    for (int i = 0; i < 52; i++)
    {
        if (talia[i].waga > 10)
        {
            switch (talia[i].waga)
            {
            case 11: cout << "Walet" << endl; break;
            case 12: cout << "Dama" << endl; break;
            case 13: cout << "Krol" << endl; break;
            case 14: cout << "As" << endl; break;
            }
        }
        else
            cout << talia[i].waga << endl;
        cout << talia[i].kolor << endl << endl;

    }
}

void WypiszKolejke(queue<Karty> gracz1, queue<Karty> gracz2)
{
    while (gracz2.empty() == false)
    {
        cout << gracz2.front().waga << " " << gracz2.front().kolor << endl;
        gracz2.pop();
    }
}

void Gra(queue<Karty>& gracz1, queue<Karty>& gracz2, Stol& stolik, bool& koniec)
{

    while (koniec != true)
    {
        cout << "Karty gracza 1: " << stolik.stos_gracza1.size() + gracz1.size() << ", Karty gracza 2: " << stolik.stos_gracza2.size() + gracz2.size() << endl;
        stolik.stos_gracza1.push(gracz1.front());
        gracz1.pop();
        stolik.stos_gracza2.push(gracz2.front());
        gracz2.pop();


        Wyswietl(gracz1, gracz2, stolik);

        if (stolik.stos_gracza1.top().waga > stolik.stos_gracza2.top().waga)
        {
            while (stolik.stos_gracza2.empty() != true && stolik.stos_gracza1.empty() != true)
            {
                gracz1.push(stolik.stos_gracza2.top());
                stolik.stos_gracza2.pop();
                gracz1.push(stolik.stos_gracza1.top());
                stolik.stos_gracza1.pop();
            }
        }
        else if (stolik.stos_gracza1.top().waga < stolik.stos_gracza2.top().waga)
        {
            while (stolik.stos_gracza2.empty() != true && stolik.stos_gracza1.empty() != true)
            {
                gracz2.push(stolik.stos_gracza1.top());
                stolik.stos_gracza1.pop();
                gracz2.push(stolik.stos_gracza2.top());
                stolik.stos_gracza2.pop();
            }
        }
        else
        {
            if (gracz2.empty() == true || gracz1.empty() == true)
            koniec = true;
            Gra(gracz1, gracz2, stolik, koniec);
        }

        if (gracz2.empty() == true || gracz1.empty() == true)
            koniec = true;

    }

}

void Wyswietl(queue<Karty> gracz1, queue<Karty> gracz2, Stol stolik)
{




    for (int i = 0; i < 10; i++)
        cout << "-";
    cout << "         ";
    for (int i = 0; i < 10; i++)
        cout << "-";
    cout << endl;
    cout << "|";
    if (stolik.stos_gracza1.top().waga > 9)
    {
        switch (stolik.stos_gracza1.top().waga)
        {
        case 10: cout << "10      "; break;
        case 11: cout << "W       "; break;
        case 12: cout << "Q       "; break;
        case 13: cout << "K       "; break;
        case 14: cout << "A       "; break;
        }
    }
    else if (stolik.stos_gracza1.top().waga <= 9)
    {
        cout << stolik.stos_gracza1.top().waga << "       ";
    }
    cout << "|         |";
    if (stolik.stos_gracza2.top().waga > 9)
    {
        switch (stolik.stos_gracza2.top().waga)
        {
        case 10: cout << "10      "; break;
        case 11: cout << "W       "; break;
        case 12: cout << "Q       "; break;
        case 13: cout << "K       "; break;
        case 14: cout << "A       "; break;
        }
    }
    else if (stolik.stos_gracza2.top().waga <= 9)
    {
        cout << stolik.stos_gracza2.top().waga << "       ";
    }
    cout << "|" << endl;
    cout << "|" << stolik.stos_gracza1.top().kolor << setw(9 - stolik.stos_gracza1.top().kolor.length()) << "|" << "         |" << stolik.stos_gracza2.top().kolor << setw(9 - stolik.stos_gracza2.top().kolor.length()) << "|" << endl;
    cout << "|        |   vs    |        |" << endl;
    cout << "|" << setw(8) << stolik.stos_gracza1.top().kolor << "|" << "         |" << setw(8) << stolik.stos_gracza2.top().kolor << "|" << endl;
    cout << "|";
    if (stolik.stos_gracza1.top().waga > 9)
    {
        switch (stolik.stos_gracza1.top().waga)
        {
        case 10: cout << "      10"; break;
        case 11: cout << "       W"; break;
        case 12: cout << "       Q"; break;
        case 13: cout << "       K"; break;
        case 14: cout << "       A"; break;
        }
    }
    else if (stolik.stos_gracza1.top().waga <= 9)
    {
        cout << "       " << stolik.stos_gracza1.top().waga;
    }
    cout << "|         |";
    if (stolik.stos_gracza2.top().waga > 9)
    {
        switch (stolik.stos_gracza2.top().waga)
        {
        case 10: cout << "      10"; break;
        case 11: cout << "       W"; break;
        case 12: cout << "       Q"; break;
        case 13: cout << "       K"; break;
        case 14: cout << "       A"; break;
        }
    }
    else if (stolik.stos_gracza2.top().waga <= 9)
    {
        cout << "       " << stolik.stos_gracza2.top().waga;
    }
    cout << "|" << endl;
    for (int i = 0; i < 10; i++)
        cout << "-";
    cout << "         ";
    for (int i = 0; i < 10; i++)
        cout << "-";
    cout << endl;

}